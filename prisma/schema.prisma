// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id             Int        @id @default(autoincrement())
  firstName      String
  lastName       String
  email          String        @unique
  password       String        // make sure this is hashed
  profilePicture String?       // we'll make it a url?
  phoneNumber    String?
  role           UserRole      @default(USER)     // we'll make default role USER for now

  // best practice to add these
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  
  bookings       Booking[]     // 1:M
  flightBookings FlightBooking[]   // Flight bookings 1:M
  hotels         Hotel[]       @relation("HotelOwner")    
  notifications  Notification[]   // 1:M
}

enum UserRole {
  USER
  HOTEL_OWNER
}


model Hotel {
  id        Int   @id @default(autoincrement())
  ownerId   Int
  name      String
  logo      String?   // we'll make it a url?
  address   String
  location  String
  starRating Int
  images    Json?    

  // best practice to add these
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  owner     User   @relation("HotelOwner", fields: [ownerId], references: [id])
  rooms     Room[]      // 1:M
  bookings  Booking[]   // 1:M
}

// Note: each room id represents a distinct room type, and the availableRooms field indicates how many rooms of that type are available
model Room {
  id             Int   @id @default(autoincrement())
  hotelId        Int
  name           String
  amenities      Json?      // array of amenity strings in json format
  pricePerNight  Float
  images         Json?      // array of images urls in json format
  availableRooms Int

  // best practice to add these 
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  hotel      Hotel @relation(fields: [hotelId], references: [id])
  bookings   Booking[]
}

model Booking {
  id         Int        @id @default(autoincrement())
  userId     Int
  hotelId    Int      
  roomId     Int
  checkIn    DateTime?
  checkOut   DateTime?
  status     BookingStatus @default(CONFIRMED)

  // best practice to add these 
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  user       User    @relation(fields: [userId], references: [id])
  hotel      Hotel?  @relation(fields: [hotelId], references: [id])
  room       Room?   @relation(fields: [roomId], references: [id])
}

model FlightBooking {
  id                     Int          @id @default(autoincrement())
  userId                 Int
  flightBookingReference String       // Reference from AFS
  flightIds              Json?        // Store flight IDs as JSON
  firstName              String
  lastName               String
  email                  String
  passportNumber         String
  status                 BookingStatus @default(CONFIRMED)

  createdAt              DateTime     @default(now())
  updatedAt              DateTime     @updatedAt

  user                   User         @relation(fields: [userId], references: [id])
}

enum BookingStatus {
  CONFIRMED
  CANCELED
  PENDING
}


model Notification {
  id        Int   @id @default(autoincrement())
  userId    Int
  message   String
  read      Boolean  @default(false)

  // best practice to add these 
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  user      User @relation(fields: [userId], references: [id])
}

//  Your startup script must also fetch the list of cities and airports (not flights) from the AFS and save them into your database
model City {
  id      Int    @id @default(autoincrement())
  city    String
  country String
}

model Airport {
  id      Int    @id @default(autoincrement())
  code    String
  name    String
  city    String
  country String
}
